# build_quimo_app_fixed.py
import os
import sys
import shutil
import subprocess
import platform

def build_quimo_app():
    print("üéâ CONSTRUYENDO APLICACI√ìN QUIMO POS COMPLETA üéâ")
    print("=" * 60)
    print("¬°CORRECCI√ìN DE SINTAXIS PARA macOS!")
    print("=" * 60)
    
    # Detectar el sistema operativo
    system = platform.system()
    print(f"üîß Sistema operativo detectado: {system}")
    
    # Configuraci√≥n de la aplicaci√≥n
    APP_NAME = "QuimoPOS"
    VERSION = "1.0.0"
    MAIN_SCRIPT = "main.py"
    AUTHOR = "Roy"
    
    # Determinar el separador seg√∫n el SO
    if system == "Windows":
        separator = ";"
    else:
        separator = ":"  # macOS/Linux usa :
    
    print(f"üîß Usando separador: '{separator}'")
    
    # Archivos y carpetas necesarios para incluir
    REQUIRED_FILES = [
        "main.py",
        "config.ini", 
        "database_manager.py",
        "ui/",  # Carpeta UI completa
    ]
    
    # Verificar que todos los archivos necesarios existen
    print("\nüîç Verificando archivos necesarios...")
    missing_files = []
    for item in REQUIRED_FILES:
        if os.path.exists(item):
            if os.path.isdir(item):
                print(f"   ‚úÖ Carpeta: {item}")
                # Contar archivos en la carpeta
                file_count = len([f for f in os.listdir(item) if os.path.isfile(os.path.join(item, f))])
                print(f"        üìÅ {file_count} archivos encontrados")
            else:
                print(f"   ‚úÖ {item}")
        else:
            print(f"   ‚ùå {item} - NO ENCONTRADO")
            missing_files.append(item)
    
    if missing_files:
        print(f"\n‚ö† Archivos faltantes: {missing_files}")
        confirm = input("¬øContinuar de todas formas? (s/n): ").strip().lower()
        if confirm != 's':
            return False
    
    # Crear comando de PyInstaller CORREGIDO
    print("\nüî® Construyendo aplicaci√≥n...")
    
    # Opciones de PyInstaller
    pyinstaller_cmd = [
        "pyinstaller",
        "--name", f"{APP_NAME}_v{VERSION}",
        "--onefile",           # Un solo archivo ejecutable
        "--windowed",          # Aplicaci√≥n de ventana (sin consola)
        "--clean",             # Limpiar build anterior
        "--noconfirm",         # No pedir confirmaci√≥n
    ]
    
    # Agregar archivos con la sintaxis CORREGIDA
    essential_files = [
        "config.ini",
        "database_manager.py",
        "main.py"
    ]
    
    for file in essential_files:
        if os.path.exists(file):
            pyinstaller_cmd.extend(["--add-data", f"{file}{separator}."])
            print(f"   ‚úÖ Incluyendo: {file}")
    
    # Agregar carpeta UI completa
    if os.path.exists("ui"):
        pyinstaller_cmd.extend(["--add-data", f"ui{separator}ui"])
        print(f"   ‚úÖ Incluyendo carpeta UI completa")
    
    # Buscar solo archivos Python esenciales (excluir scripts de desarrollo)
    print("\nüîé Buscando archivos Python adicionales importantes...")
    essential_py_files = [
        # Agrega aqu√≠ los nombres de archivos Python que son esenciales para tu aplicaci√≥n
        "productos.py",
        "lotes.py", 
        "presentaciones.py",
        # Excluimos scripts de desarrollo como test_post.py, fixing.py, etc.
    ]
    
    for py_file in essential_py_files:
        if os.path.exists(py_file):
            pyinstaller_cmd.extend(["--add-data", f"{py_file}{separator}."])
            print(f"   ‚úÖ Incluyendo: {py_file}")
    
    # Agregar el script principal al final (sin --add-data)
    pyinstaller_cmd.append(MAIN_SCRIPT)
    
    print(f"\n   Comando PyInstaller preparado")
    print(f"   Separador usado: '{separator}'")
    
    # Ejecutar PyInstaller
    try:
        print("   üèóÔ∏è Ejecutando PyInstaller...")
        result = subprocess.run(pyinstaller_cmd, check=True, capture_output=True, text=True)
        print("   ‚úÖ Build completado exitosamente!")
    except subprocess.CalledProcessError as e:
        print(f"   ‚ùå Error en el build: {e}")
        print(f"   Salida de error: {e.stderr}")
        return False
    
    # Crear carpeta de distribuci√≥n completa
    print("\nüìÅ Creando paquete de distribuci√≥n completo...")
    dist_folder = f"{APP_NAME}_Distribucion_Completa"
    if os.path.exists(dist_folder):
        shutil.rmtree(dist_folder)
    os.makedirs(dist_folder)
    
    # Copiar el ejecutable
    exe_source = f"dist/{APP_NAME}_v{VERSION}"
    if system == "Windows":
        exe_source += ".exe"
    
    exe_dest = f"{dist_folder}/{APP_NAME}"
    if system == "Windows":
        exe_dest += ".exe"
    
    if os.path.exists(exe_source):
        shutil.copy2(exe_source, exe_dest)
        print(f"   ‚úÖ Ejecutable copiado: {APP_NAME}")
    else:
        print(f"   ‚ùå No se encontr√≥ el ejecutable: {exe_source}")
        return False
    
    # Copiar archivos de configuraci√≥n y soporte
    support_files = [
        "config.ini", 
        "database_manager.py",
    ]
    
    for file in support_files:
        if os.path.exists(file):
            shutil.copy2(file, dist_folder)
            print(f"   ‚úÖ {file} copiado")
    
    # Copiar carpeta UI completa
    if os.path.exists("ui"):
        shutil.copytree("ui", f"{dist_folder}/ui")
        ui_file_count = len([f for f in os.listdir("ui") if os.path.isfile(os.path.join("ui", f))])
        print(f"   ‚úÖ Carpeta UI copiada ({ui_file_count} archivos)")
    
    # Copiar otros archivos Python esenciales
    for py_file in essential_py_files:
        if os.path.exists(py_file):
            shutil.copy2(py_file, dist_folder)
            print(f"   ‚úÖ {py_file} copiado")
    
    # Crear archivos de documentaci√≥n
    create_documentation(dist_folder, APP_NAME, VERSION, AUTHOR, system)
    
    # Mostrar resumen final
    show_build_summary(dist_folder)
    
    return True

def create_documentation(dist_folder, app_name, version, author, system):
    """Crear archivos de documentaci√≥n para la aplicaci√≥n"""
    
    # Crear README.txt
    readme_content = f"""
{app_name} - Sistema de Punto de Venta Completo
Versi√≥n: {version}
Desarrollado por: {author}
Sistema operativo: {system}

¬°FELICITACIONES! Has completado tu aplicaci√≥n despu√©s de 5 meses de trabajo.

ESTRUCTURA DE LA APLICACI√ìN:

üìÅ {app_name}              - Aplicaci√≥n principal {'(.exe)' if system == 'Windows' else ''}
üìÅ config.ini                - Configuraci√≥n de base de datos  
üìÅ database_manager.py       - Manejador de base de datos
üìÅ ui/                       - Archivos de interfaz de usuario
üìÅ [otros archivos .py]      - M√≥dulos adicionales

INSTRUCCIONES DE INSTALACI√ìN:

1. REQUISITOS PREVIOS:
   - PostgreSQL instalado y configurado
   - Base de datos 'quimo_bd_new' creada
   - Servidor PostgreSQL ejecut√°ndose

2. CONFIGURACI√ìN:
   - Editar el archivo 'config.ini' con tus datos de conexi√≥n
   - Aseg√∫rate de que la base de datos tenga las tablas migradas

3. EJECUCI√ìN:
   - {'Doble clic en' if system == 'Windows' else 'Ejecutar'} '{app_name}{'.exe' if system == 'Windows' else ''}'
   - La aplicaci√≥n se iniciar√° autom√°ticamente

4. PARA DESARROLLADORES:
   - Los archivos .py est√°n incluidos para referencia
   - Puedes modificar y reconstruir la aplicaci√≥n

¬°Gracias por usar {app_name}!
"""
    
    with open(f"{dist_folder}/README.txt", "w", encoding="utf-8") as f:
        f.write(readme_content)
    
    # Crear script de instalaci√≥n r√°pido (solo para Windows)
    if system == "Windows":
        install_script = f"""
@echo off
chcp 65001 >nul
echo ===============================================
echo    QUIMO POS - INSTALADOR AUTOM√ÅTICO
echo ===============================================
echo.
echo ¬°Felicidades! Est√°s a punto de instalar QuimoPOS.
echo Esta aplicaci√≥n fue desarrollada despu√©s de 5 meses de trabajo.
echo.
echo Aseg√∫rate de tener:
echo 1. PostgreSQL instalado
echo 2. Base de datos 'quimo_bd_new' creada  
echo 3. Servidor PostgreSQL ejecut√°ndose
echo.
echo Presiona cualquier tecla para iniciar la aplicaci√≥n...
pause >nul
echo.
echo Iniciando QuimoPOS...
{app_name}.exe
"""
        with open(f"{dist_folder}/Instalar_Quimo.bat", "w", encoding="utf-8") as f:
            f.write(install_script)
    
    # Para macOS/Linux crear un script de ejecuci√≥n
    else:
        run_script = f"""#!/bin/bash
echo "==============================================="
echo "   QUIMO POS - EJECUTAR APLICACI√ìN"
echo "==============================================="
echo ""
echo "¬°Felicidades! Est√°s a punto de ejecutar QuimoPOS."
echo "Esta aplicaci√≥n fue desarrollada despu√©s de 5 meses de trabajo."
echo ""
echo "Aseg√∫rate de tener:"
echo "1. PostgreSQL instalado"
echo "2. Base de datos 'quimo_bd_new' creada"  
echo "3. Servidor PostgreSQL ejecut√°ndose"
echo ""
echo "Iniciando QuimoPOS..."
chmod +x ./{app_name}
./{app_name}
"""
        with open(f"{dist_folder}/Ejecutar_Quimo.sh", "w", encoding="utf-8") as f:
            f.write(run_script)
        # Hacer el script ejecutable
        os.chmod(f"{dist_folder}/Ejecutar_Quimo.sh", 0o755)
    
    print("   ‚úÖ Documentaci√≥n creada")

def show_build_summary(dist_folder):
    """Mostrar resumen detallado del build"""
    print(f"\nüìä RESUMEN DE LA CONSTRUCCI√ìN:")
    print("=" * 50)
    
    total_files = 0
    total_size = 0
    
    for root, dirs, files in os.walk(dist_folder):
        for file in files:
            file_path = os.path.join(root, file)
            total_files += 1
            total_size += os.path.getsize(file_path)
    
    print(f"üìÅ Carpeta de distribuci√≥n: {dist_folder}")
    print(f"üì¶ Total de archivos: {total_files}")
    print(f"üíæ Tama√±o total: {total_size / (1024*1024):.2f} MB")
    
    # Listar contenido
    print(f"\nüìã CONTENIDO:")
    for item in os.listdir(dist_folder):
        item_path = os.path.join(dist_folder, item)
        if os.path.isdir(item_path):
            file_count = len([f for f in os.listdir(item_path) if os.path.isfile(os.path.join(item_path, f))])
            print(f"   üìÅ {item}/ ({file_count} archivos)")
        else:
            size = os.path.getsize(item_path) / 1024
            print(f"   üìÑ {item} ({size:.1f} KB)")

if __name__ == "__main__":
    print("üîÑ INICIANDO CONSTRUCCI√ìN CORREGIDA...")
    
    success = build_quimo_app()
    
    if success:
        print("\n" + "=" * 60)
        print("üéâ ¬°TU APLICACI√ìN COMPLETA EST√Å LISTA!")
        print("=" * 60)
        print("\nüìã Pr√≥ximos pasos:")
        print("1. üß™ Prueba el ejecutable en tu equipo")
        print("2. üì§ Comprime la carpeta de distribuci√≥n")
        print("3. üñ•Ô∏è Distribuye a otros equipos con PostgreSQL")
        print("4. üéä ¬°Comparte tu incre√≠ble logro!")
        print(f"\nüí° La aplicaci√≥n est√° optimizada y lista para usar")
    else:
        print("\n‚ùå La construcci√≥n fall√≥. Revisa los errores arriba.")